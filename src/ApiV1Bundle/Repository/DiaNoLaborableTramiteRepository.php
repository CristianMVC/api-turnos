<?php
namespace ApiV1Bundle\Repository;
use ApiV1Bundle\Entity\DiaNoLaborableTramite;
/**
 * DiaNoLaborableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DiaNoLaborableTramiteRepository extends ApiRepository
{

    /**
     * @return \Doctrine\ORM\EntityRepository
     */
    private function getRepository()
    {
        return $this->getEntityManager()->getRepository('ApiV1Bundle:DiaNoLaborableTramite');
    }

    /**
     * Elimina los días no habiles por fecha
     *
     * @param date $fecha fecha a eliminar
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function deleteDiaNoLaborable($fecha)
    {
        $query = $this->getRepository()->createQueryBuilder('d');
        $query->delete();
        $query->where('d.fecha = :fecha')->setParameter('fecha', $fecha);
        return $query->getQuery()->execute();
    }

    /**
     * Determinar si Es día no laborable para un punto de atención
     *
     * @param date $fecha fecha
     * @param object $puntoAtencion objeto PuntoAtencion
     * @return bool
     */
    public function isDiaNoLaborable($fecha, $puntoAtencion, $tramiteId)
    {
        $query = $this->getRepository()->createQueryBuilder('d');
        $query->where('d.fecha = :fecha')->setParameter('fecha', $fecha);
        $query->andWhere('d.puntoAtencion = :puntoAtencion')->setParameter('puntoAtencion', $puntoAtencion);
        $query->andWhere('d.tramite = :tramite')->setParameter('tramite', $tramiteId);
        $result = $query->getQuery()->getResult();

        return !empty($result);
    }
    
    /**
     * 
     * @param type $puntoAtencionId
     * @param type $tramiteId
     * @return type
     */
    
     public function findAllByTramitePda($puntoAtencionId, $tramiteId) {
        $query = $this->getRepository()->createQueryBuilder('d');
        $query->where('d.puntoAtencion = :puntoAtencionId')->setParameter('puntoAtencionId', $puntoAtencionId);
        $query->andWhere('d.tramite= :tramite')->setParameter('tramite', $tramiteId);
        $query->orderBy('d.fecha', 'ASC');
        return $query->getQuery()->getResult();
    }

    /**
     * Inhabilitar día
     *
     * @param object $puntoAtencion PuntoAtencion
     * @param array $params arreglo con la fecha
     * @return ValidateResultado
     */
    public function inhabilitarDia($puntoAtencion,$tramite, $params) {
       // $validateResultado = $this->puntoAtencionValidator->validarInhabilitarDia($puntoAtencion, $params);

        //if (!$validateResultado->hasError()) {
            $fecha = new \DateTime($params['fecha']);
            $diaNoLaborable = new DiaNoLaborableTramite($fecha, $puntoAtencion, $tramite);
            $this->save($diaNoLaborable);

            $validateResultado = new ValidateResultado($puntoAtencion, []);
        //}

        return $validateResultado;
    }
}
